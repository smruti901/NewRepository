FileNotFoundException = java.io = This exception will be thrown by the FileInputStream, FileOutputStream, and RandomAccessFile constructors
IOException = java.io = This class is the general class of exceptions produced by failed or interrupted I/O operations.
SQLException - if a database access error occurs or the url is null.
SQLTimeoutException - when the driver has determined that the timeout value specified by the setLoginTimeout method has been exceeded and 
has at least tried to cancel the current database connection attempt. 


Connection java.sql.DriverManager.getConnection(String url, Properties info) throws SQLException
Attempts to establish a connection to the given database URL.The DriverManager attempts to select an appropriate driver fromthe set of registered JDBC drivers. 
Note: If a property is specified as part of the url andis also specified in the Properties object, it isimplementation-defined as to which value will take precedence.For maximum portability, an application should only specify aproperty once.
Parameters:url a database url of the form  jdbc:subprotocol:subnameinfo a list of arbitrary string tag/value pairs asconnection arguments; normally at least a "user" and"password" property should be includedReturns:a Connection to the URL

java.sql.Connection
A connection (session) with a specificdatabase. SQL statements are executed and results are returnedwithin the context of a connection. 
A Connection object's database is able to provide informationdescribing its tables, its supported SQL grammar, its storedprocedures, the capabilities of this connection, and so on. Thisinformation is obtained with the getMetaData method. 
Note: When configuring a Connection, JDBC applicationsshould use the appropriate Connection method such as setAutoCommit or setTransactionIsolation.Applications should not invoke SQL commands directly to change the connection'sconfiguration when there is a JDBC method available. By default a Connection object is inauto-commit mode, which means that it automatically commits changesafter executing each statement. If auto-commit mode has beendisabled, the method commit must be called explicitly inorder to commit changes; otherwise, database changes will not be saved. 
A new Connection object created using the JDBC 2.1 core APIhas an initially empty type map associated with it. A user may enter acustom mapping for a UDT in this type map.When a UDT is retrieved from a data source with themethod ResultSet.getObject, the getObject methodwill check the connection's type map to see if there is an entry for thatUDT. If so, the getObject method will map the UDT to theclass indicated. If there is no entry, the UDT will be mapped using thestandard mapping. 
A user may create a new type map, which is a java.util.Mapobject, make an entry in it, and pass it to the java.sqlmethods that can perform custom mapping. In this case, the methodwill use the given type map instead of the one associated withthe connection. 
For example, the following code fragment specifies that the SQLtype ATHLETES will be mapped to the class Athletes in the Java programming language.The code fragment retrieves the type map for the Connection object con, inserts the entry into it, and then setsthe type map with the new entry as the connection's type map. 
      java.util.Map map = con.getTypeMap();
      map.put("mySchemaName.ATHLETES", Class.forName("Athletes"));
      con.setTypeMap(map);
      

java.sql.ResultSet
A table of data representing a database result set, whichis usually generated by executing a statement that queries the database. 
A ResultSet object maintains a cursor pointingto its current row of data. Initially the cursor is positionedbefore the first row. The next method moves thecursor to the next row, and because it returns falsewhen there are no more rows in the ResultSet object,it can be used in a while loop to iterate throughthe result set. 
A default ResultSet object is not updatable andhas a cursor that moves forward only. Thus, you caniterate through it only once and only from the first row to thelast row. It is possible toproduce ResultSet objects that are scrollable and/orupdatable. The following code fragment, in which conis a valid Connection object, illustrates how to makea result set that is scrollable and insensitive to updates by others, andthat is updatable. See ResultSet fields for otheroptions. 
       Statement stmt = con.createStatement(
                                      ResultSet.TYPE_SCROLL_INSENSITIVE,
                                      ResultSet.CONCUR_UPDATABLE);
       ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2");
       // rs will be scrollable, will not show changes made by others,
       // and will be updatable
The ResultSet interface provides getter methods (getBoolean, getLong, and so on)for retrieving column values from the current row.Values can be retrieved using either the index number of thecolumn or the name of the column. In general, using thecolumn index will be more efficient. Columns are numbered from 1.For maximum portability, result set columns within each row should beread in left-to-right order, and each column should be read only once. 
For the getter methods, a JDBC driver attemptsto convert the underlying data to the Java type specified in thegetter method and returns a suitable Java value. The JDBC specificationhas a table showing the allowable mappings from SQL types to Java typesthat can be used by the ResultSet getter methods. 
Column names used as input to getter methods are caseinsensitive. When a getter method is called witha column name and several columns have the same name,the value of the first matching column will be returned.The column name option isdesigned to be used when column names are used in the SQLquery that generated the result set.For columns that are NOT explicitly named in the query, itis best to use column numbers. If column names are used, theprogrammer should take care to guarantee that they uniquely refer tothe intended columns, which can be assured with the SQL AS clause. 
A set of updater methods were added to this interfacein the JDBC 2.0 API (Java 2 SDK,Standard Edition, version 1.2). The comments regarding parametersto the getter methods also apply to parameters to theupdater methods. 
The updater methods may be used in two ways: 
1.to update a column value in the current row. In a scrollable ResultSet object, the cursor can be moved backwardsand forwards, to an absolute position, or to a positionrelative to the current row.The following code fragment updates the NAME columnin the fifth row of the ResultSet object rs and then uses the method updateRowto update the data source table from which rs was derived. 
       rs.absolute(5); // moves the cursor to the fifth row of rs
       rs.updateString("NAME", "AINSWORTH"); // updates the
          // NAME column of row 5 to be AINSWORTH
       rs.updateRow(); // updates the row in the data source
2.to insert column values into the insert row. An updatable ResultSet object has a special row associated withit that serves as a staging area for building a row to be inserted.The following code fragment moves the cursor to the insert row, buildsa three-column row, and inserts it into rs and intothe data source table using the method insertRow. 
       rs.moveToInsertRow(); // moves cursor to the insert row
       rs.updateString(1, "AINSWORTH"); // updates the
          // first column of the insert row to be AINSWORTH
       rs.updateInt(2,35); // updates the second column to be 35
       rs.updateBoolean(3, true); // updates the third column to true
       rs.insertRow();
       rs.moveToCurrentRow();
A ResultSet object is automatically closed when the Statement object thatgenerated it is closed, re-executed, or usedto retrieve the next result from a sequence of multiple results. 
The number, types and properties of a ResultSetobject's columns are provided by the ResultSetMetaDataobject returned by the ResultSet.getMetaData method.

 
